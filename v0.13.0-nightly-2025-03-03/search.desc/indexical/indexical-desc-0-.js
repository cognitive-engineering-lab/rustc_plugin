searchState.loadedDescShard("indexical", 0, "Indexical: Human-Friendly Indexed Collections\nGeneric interface for converting iterators into indexical …\nThe index for <code>Self</code>.\nAn unordered collections of pairs <code>(R, C)</code>, implemented with …\nAn unordered collections of <code>T</code>s, implemented with a bit-set.\nAn indexed collection of objects.\nLinks a type to its index.\nExtension trait that adds <code>collect_indexical</code> to all …\nCoherence hack for the <code>ToIndex</code> trait.\nCoherence hack for the <code>ToIndex</code> trait.\nCoherence hack for the <code>ToIndex</code> trait.\nImplicit conversions from elements to indexes. Commonly …\nReturns immutable access to the underlying indexed vector.\nAbstraction over bit-set implementations.\nRemoves every element from <code>self</code>.\nClears all the elements from the <code>row</code>.\nReturns the <code>IndexedDomain</code> for the column type.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nLike <code>Iterator::collect</code>, except also takes as input a <code>domain</code>…\nReturns true if <code>value</code> is contained in the domain.\nReturns true if <code>index</code> is contained in <code>self</code>.\nCreates a new index type and associates it with an object …\nSimilar to <code>IndexedDomain::index</code>, except it adds <code>value</code> to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an iterator into a collection within the given …\nGets the index corresponding to <code>value</code>.\nReturns an iterator over all indices of the domain.\nReturns an iterator over all the indices contained in <code>self</code>.\nReturns a reference to the inner set.\nAdds <code>value</code> to the domain, returning its new index.\nInserts a pair <code>(row, col)</code> into the matrix, returning true …\nAdds the element <code>elt</code> to <code>self</code>, returning true if <code>self</code> …\nAdds every element of the domain to <code>self</code>.\nRemoves every element of <code>self</code> not in <code>other</code>.\nRemoves every element of <code>self</code> not in <code>other</code>, returning true …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the domain is empty.\nReturn true if <code>self</code> has no elements.\nReturns true if every element in <code>other</code> is also in <code>self</code>.\nReturns an iterator over all elements of the domain.\nReturns an iterator over all the objects contained in <code>self</code>.\nReturns an iterator over all pairs of indices and elements …\nReturns an iterator over the pairs of indices and objects …\nReturns the number of elements in the domain.\nReturns the number of elements in <code>self</code>.\nMap-like collections for indexed keys.\nCreates a new domain from an indexed vector.\nCreates an empty matrix.\nCreates an empty index set.\nAbstraction over smart pointers.\nReturns an iterator over the elements in <code>row</code>.\nReturns the <code>IndexSet</code> for a particular <code>row</code>.\nReturns an iterator over all rows in the matrix.\nRemoves every element of <code>other</code> from <code>self</code>.\nRemoves every element of <code>other</code> from <code>self</code>, returning true …\nConverts <code>self</code> to an index over <code>T</code>.\nAdds each element of <code>other</code> to <code>self</code>.\nAdds each element of <code>other</code> to <code>self</code>, returning true if <code>self</code> …\nAdds all elements of <code>from</code> into the row <code>into</code>.\nAdds all elements from the row <code>from</code> into the row <code>into</code>.\nGets the object corresponding to <code>index</code>.\nInterface for bit-set implementations.\nType of iterator returned by <code>iter</code>.\nSets all bits to 0.\nReturns true if <code>index</code> is 1.\nCopies <code>other</code> into <code>self</code>. Must have the same lengths.\nConstructs a new bit-set with a domain of size <code>size</code>.\nSets <code>index</code> to 1, returning true if <code>self</code> changed.\nAdds every element of the domain to <code>self</code>.\nRemoves all ones in <code>self</code> not in <code>other</code>.\nRemoves all ones in <code>self</code> not in <code>other</code>, returning true if …\nFlips all bits in <code>self</code>.\nReturns true if there are no ones in the bit-set.\nReturns an iterator over all the indices of ones in the …\nReturns the number of ones in the bit-set.\nThe Rust compiler’s <code>BitSet</code>.\nRemoves all ones from <code>other</code> in <code>self</code>.\nRemoves all ones from <code>other</code> in <code>self</code>, returning true if <code>self</code>…\nReturns true if all ones in <code>other</code> are a one in <code>self</code>.\nAdds all ones from <code>other</code> to <code>self</code>.\nAdds all ones from <code>other</code> to <code>self</code>, returning true if <code>self</code> …\n<code>IndexMatrix</code> specialized to the <code>bit_set::BitSet</code> …\n<code>IndexSet</code> specialized to the <code>bit_set::BitSet</code> implementation …\nA fixed-size bitset type with a partially dense, partially …\nA fixed-size bitset type with a dense representation.\n<code>IndexMatrix</code> specialized to the <code>bit_set::BitSet</code> …\n<code>IndexSet</code> specialized to the <code>bit_set::BitSet</code> implementation.\nA bitset with a mixed representation, using <code>DenseBitSet</code> …\n<code>IndexMatrix</code> specialized to the <code>bit_set::BitSet</code> …\n<code>IndexSet</code> specialized to the <code>bit_set::BitSet</code> implementation …\nA bitset specialized to <code>usize</code> indices.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\n<code>DenseIndexMap</code> specialized to the <code>ArcFamily</code>.\nA mapping from indexed keys to values, implemented densely …\n<code>DenseIndexMap</code> specialized to the <code>RcFamily</code>.\n<code>DenseIndexMap</code> specialized to the <code>RefFamily</code>.\n<code>SparseIndexMap</code> specialized to the <code>ArcFamily</code>.\nA mapping from indexed keys to values, implemented …\n<code>SparseIndexMap</code> specialized to the <code>RcFamily</code>.\n<code>SparseIndexMap</code> specialized to the <code>RefFamily</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns a mutable entry into the map for the given key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an immutable reference to a value for a given key …\nReturns an immutable reference to a value for a given key …\nReturns a mutable reference to a value for a given key if …\nReturns a mutable reference to a value for a given key if …\nReturns a reference to a value for a given key.\nReturns a reference to a value for a given key.\nReturns a mutable reference to a value for a given key.\nReturns a mutable reference to a value for a given key.\nInserts the key/value pair into <code>self</code>.\nInserts the key/value pair into <code>self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the map has no elements.\nReturns the number of entries in the map.\nConstructs an empty map within the given domain.\nConstructs a new map with an initial element of <code>mk_elem(i)</code> …\nReturns an iterator over the values of the map.\nReturns an iterator over the values of the map.\nFamily of <code>Arc</code> pointers.\nPointer type for a given family.\nAbstraction over smart pointers.\nFamily of <code>Rc</code> pointers.\nFamily of <code>&amp;</code>-references.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")