searchState.loadedDescShard("ts_rs", 0, "why?\nA typescript type which is depended upon by other types. …\nAn error which may occur when exporting a type\nA type which can be represented in TypeScript. Most of the …\nDerives TS for a struct or enum. Please take a look at TS …\nDeclaration of this type, e.g. …\nInformation about types this type depends on. This is used …\nManually export this type to a file. The output file can …\nManually export this type to a file with a file with the …\nManually generate bindings for this type, returning a …\nPath to where the type would be exported. By default a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>Dependency</code> from the given type <code>T</code>. If <code>T</code> is not …\nFormats this types definition in TypeScript, e.g …\nFlatten an type declaration. This function will panic if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nName of this type in TypeScript.\nName of this type in TypeScript, with type arguments.\n<code>true</code> if this is a transparent type, e.g tuples or a list. …\nName of the type in TypeScript\nType ID of the rust type")